{{#if originalClassPkg}}package {{originalClassPkg}};{{/if}}

import dev.restate.sdk.kotlin.Awaitable
import dev.restate.sdk.kotlin.Context
import dev.restate.sdk.kotlin.SendOptions
import dev.restate.sdk.kotlin.CallOptions
import dev.restate.sdk.types.StateKey
import dev.restate.serde.Serde
import dev.restate.common.Target
import kotlin.time.Duration
import dev.restate.client.kotlin.*

object {{generatedClassSimpleName}} {

    fun fromContext(ctx: Context{{#isKeyed}}, key: String{{/isKeyed}}): ContextClient {
        return ContextClient(ctx{{#isKeyed}}, key{{/isKeyed}})
    }

    fun fromClient(client: dev.restate.client.Client{{#isKeyed}}, key: String{{/isKeyed}}): IngressClient {
        return IngressClient(client{{#isKeyed}}, key{{/isKeyed}});
    }

    fun connect(baseUri: String{{#isKeyed}}, key: String{{/isKeyed}}): IngressClient {
        return IngressClient(dev.restate.client.Client.connect(baseUri){{#isKeyed}}, key{{/isKeyed}});
    }

    class ContextClient(private val ctx: Context{{#isKeyed}}, private val key: String{{/isKeyed}}){
        {{#handlers}}
        suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}} options: CallOptions = CallOptions.DEFAULT): Awaitable<{{{boxedOutputFqcn}}}> {
            return this.ctx.callAsync(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}Unit{{else}}req{{/if}},
                options)
        }{{/handlers}}

        fun send(): Send {
            return Send()
        }

        inner class Send internal constructor() {
            {{#handlers}}
            suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}} options: SendOptions = SendOptions.DEFAULT) {
                this@ContextClient.ctx.send(
                    {{{targetExpr this "this@ContextClient.key"}}},
                    {{inputSerdeRef}},
                    {{#if inputEmpty}}Unit{{else}}req{{/if}},
                    options);
            }{{/handlers}}
        }
    }

    class IngressClient(private val client: dev.restate.client.Client{{#isKeyed}}, private val key: String{{/isKeyed}}) {

        {{#handlers}}{{#if isWorkflow}}
        fun workflowHandle(): dev.restate.client.Client.WorkflowHandle<{{{boxedOutputFqcn}}}> {
            return this@IngressClient.client.workflowHandle(
                {{generatedClassSimpleNamePrefix}}Definitions.SERVICE_NAME,
                this.key,
                {{outputSerdeRef}});
        }

        suspend fun submit({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}requestOptions: dev.restate.client.RequestOptions = dev.restate.client.RequestOptions.DEFAULT): dev.restate.client.SendResponse {
            return this@IngressClient.client.sendSuspend(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{#if inputEmpty}}Unit{{else}}req{{/if}},
                kotlin.time.Duration.ZERO,
                requestOptions);
        }
        {{else}}
        suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}requestOptions: dev.restate.client.CallRequestOptions = dev.restate.client.CallRequestOptions.DEFAULT): {{{boxedOutputFqcn}}} {
            return this@IngressClient.client.callSuspend(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}Unit{{else}}req{{/if}},
                requestOptions);
        }
        {{/if}}{{/handlers}}

        fun send(delay: Duration = Duration.ZERO): Send {
            return Send(delay)
        }

        inner class Send(private val delay: Duration) {
            {{#handlers}}{{^isWorkflow}}
            suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}requestOptions: dev.restate.client.CallRequestOptions = dev.restate.client.CallRequestOptions.DEFAULT): dev.restate.client.SendResponse {
                return this@IngressClient.client.sendSuspend(
                    {{{targetExpr this "this@IngressClient.key"}}},
                    {{inputSerdeRef}},
                    {{#if inputEmpty}}Unit{{else}}req{{/if}},
                    delay,
                    requestOptions);
            }{{/isWorkflow}}{{/handlers}}
        }
    }
}