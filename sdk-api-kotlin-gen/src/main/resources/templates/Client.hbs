{{#if originalClassPkg}}package {{originalClassPkg}};{{/if}}

import dev.restate.sdk.kotlin.Awaitable
import dev.restate.sdk.kotlin.Context
import dev.restate.sdk.common.StateKey
import dev.restate.sdk.common.Serde
import dev.restate.sdk.common.Target
import kotlin.time.Duration
import dev.restate.sdk.kotlin.callSuspend
import dev.restate.sdk.kotlin.sendSuspend

object {{generatedClassSimpleName}} {

    fun fromContext(ctx: Context{{#isKeyed}}, key: String{{/isKeyed}}): ContextClient {
        return ContextClient(ctx{{#isKeyed}}, key{{/isKeyed}})
    }

    fun fromIngress(ingressClient: dev.restate.sdk.client.IngressClient{{#isKeyed}}, key: String{{/isKeyed}}): IngressClient {
        return IngressClient(ingressClient{{#isKeyed}}, key{{/isKeyed}});
    }

    fun fromIngress(baseUri: String{{#isKeyed}}, key: String{{/isKeyed}}): IngressClient {
        return IngressClient(dev.restate.sdk.client.IngressClient.defaultClient(baseUri){{#isKeyed}}, key{{/isKeyed}});
    }

    class ContextClient(private val ctx: Context{{#isKeyed}}, private val key: String{{/isKeyed}}){
        {{#handlers}}
        suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}{{/inputEmpty}}): Awaitable<{{{boxedOutputFqcn}}}> {
            return this.ctx.callAsync(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}Unit{{else}}req{{/if}})
        }{{/handlers}}

        fun send(delay: Duration = Duration.ZERO): Send {
            return Send(delay)
        }

        inner class Send(private val delay: Duration) {
            {{#handlers}}
            suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}{{/inputEmpty}}) {
                this@ContextClient.ctx.send(
                    {{{targetExpr this "this@ContextClient.key"}}},
                    {{inputSerdeRef}},
                    {{#if inputEmpty}}Unit{{else}}req{{/if}},
                    delay);
            }{{/handlers}}
        }
    }

    class IngressClient(private val ingressClient: dev.restate.sdk.client.IngressClient{{#isKeyed}}, private val key: String{{/isKeyed}}) {

        {{#handlers}}{{#if isWorkflow}}
        suspend fun submit({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}requestOptions: dev.restate.sdk.client.RequestOptions = dev.restate.sdk.client.RequestOptions.DEFAULT): dev.restate.sdk.client.IngressClient.InvocationHandle<{{{boxedOutputFqcn}}}> {
            return this.ingressClient.submitSuspend(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}Unit{{else}}req{{/if}},
                requestOptions);
        }
        {{else}}
        suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}requestOptions: dev.restate.sdk.client.CallRequestOptions = dev.restate.sdk.client.CallRequestOptions.DEFAULT): {{{boxedOutputFqcn}}} {
            return this.ingressClient.callSuspend(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}Unit{{else}}req{{/if}},
                requestOptions);
        }
        {{/if}}{{/handlers}}

        fun send(delay: Duration = Duration.ZERO): Send {
            return Send(delay)
        }

        inner class Send(private val delay: Duration) {
            {{#handlers}}{{^isWorkflow}}
            suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}requestOptions: dev.restate.sdk.client.CallRequestOptions = dev.restate.sdk.client.CallRequestOptions.DEFAULT): String {
                return this@IngressClient.ingressClient.sendSuspend(
                    {{{targetExpr this "this@IngressClient.key"}}},
                    {{inputSerdeRef}},
                    {{#if inputEmpty}}Unit{{else}}req{{/if}},
                    delay,
                    requestOptions);
            }{{/isWorkflow}}{{/handlers}}
        }
    }
}