{{#if originalClassPkg}}package {{originalClassPkg}};{{/if}}

{{#contextClientEnabled}}
import dev.restate.sdk.kotlin.CallAwaitable
import dev.restate.sdk.kotlin.InvocationHandle
import dev.restate.sdk.kotlin.Context
import dev.restate.sdk.kotlin.asSendDelayed
{{/contextClientEnabled}}
import dev.restate.serde.Serde
import dev.restate.common.Target
import kotlin.time.Duration
{{#ingressClientEnabled}}
import dev.restate.client.kotlin.*
{{/ingressClientEnabled}}

object {{generatedClassSimpleName}} {

    {{#contextClientEnabled}}
    fun fromContext(ctx: Context{{#isKeyed}}, key: String{{/isKeyed}}): ContextClient {
        return ContextClient(ctx{{#isKeyed}}, key{{/isKeyed}})
    }
    {{/contextClientEnabled}}

    {{#ingressClientEnabled}}
    fun fromClient(client: dev.restate.client.Client{{#isKeyed}}, key: String{{/isKeyed}}): IngressClient {
        return IngressClient(client{{#isKeyed}}, key{{/isKeyed}});
    }

    fun connect(baseUri: String, {{#isKeyed}}key: String, {{/isKeyed}}requestOptions: dev.restate.client.ClientRequestOptions = dev.restate.client.ClientRequestOptions.DEFAULT): IngressClient {
        return IngressClient(dev.restate.client.Client.connect(baseUri, {{metadataClass}}.SERDE_FACTORY, requestOptions){{#isKeyed}}, key{{/isKeyed}});
    }
    {{/ingressClientEnabled}}

    {{#contextClientEnabled}}
    class ContextClient(private val ctx: Context{{#isKeyed}}, private val key: String{{/isKeyed}}){
        {{#handlers}}
        suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}init: dev.restate.common.Request.Builder<{{{boxedInputFqcn}}}, {{{boxedOutputFqcn}}}>.() -> Unit = {}): CallAwaitable<{{{boxedOutputFqcn}}}> {
            return this.ctx.call(
                {{../requestsClass}}.{{methodName}}({{#if ../isKeyed}}this.key, {{/if}}{{^inputEmpty}}req, {{/inputEmpty}}init)
            )
        }{{/handlers}}

        fun send(): Send {
            return Send()
        }

        inner class Send internal constructor() {
            {{#handlers}}
            suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}delay: Duration? = null, init: dev.restate.common.Request.Builder<{{{boxedInputFqcn}}}, {{{boxedOutputFqcn}}}>.() -> Unit = {}): InvocationHandle<{{{boxedOutputFqcn}}}> {
                if (delay != null) {
                    return this@ContextClient.ctx.send(
                        {{../requestsClass}}.{{methodName}}({{#if ../isKeyed}}this@ContextClient.key, {{/if}}{{^inputEmpty}}req, {{/inputEmpty}}init).asSendDelayed(delay)
                    );
                }
                return this@ContextClient.ctx.send(
                    {{../requestsClass}}.{{methodName}}({{#if ../isKeyed}}this@ContextClient.key, {{/if}}{{^inputEmpty}}req, {{/inputEmpty}}init)
                );
            }{{/handlers}}
        }
    }
    {{/contextClientEnabled}}

    {{#ingressClientEnabled}}
    class IngressClient(private val client: dev.restate.client.Client{{#isKeyed}}, private val key: String{{/isKeyed}}) {

        {{#handlers}}{{#if isWorkflow}}
        fun workflowHandle(): dev.restate.client.Client.WorkflowHandle<{{{boxedOutputFqcn}}}> {
            return this@IngressClient.client.workflowHandle(
                {{metadataClass}}.SERVICE_NAME,
                this.key,
                {{outputSerdeRef}});
        }

        suspend fun submit({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}init: dev.restate.common.Request.Builder<{{{boxedInputFqcn}}}, {{{boxedOutputFqcn}}}>.() -> Unit = {}): dev.restate.client.SendResponse<{{{boxedOutputFqcn}}}> {
            return this@IngressClient.client.sendSuspend(
                {{../requestsClass}}.{{methodName}}({{#if ../isKeyed}}this.key, {{/if}}{{^inputEmpty}}req, {{/inputEmpty}}init)
            ).response();
        }
        {{else}}
        suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}init: dev.restate.common.Request.Builder<{{{boxedInputFqcn}}}, {{{boxedOutputFqcn}}}>.() -> Unit = {}): {{{boxedOutputFqcn}}} {
            return this@IngressClient.client.callSuspend(
                {{../requestsClass}}.{{methodName}}({{#if ../isKeyed}}this.key, {{/if}}{{^inputEmpty}}req, {{/inputEmpty}}init)
            ).response();
        }
        {{/if}}{{/handlers}}

        fun send(): Send {
            return Send()
        }

        inner class Send() {
            {{#handlers}}{{^isWorkflow}}
            suspend fun {{methodName}}({{^inputEmpty}}req: {{{inputFqcn}}}, {{/inputEmpty}}delay: Duration? = null, init: dev.restate.common.Request.Builder<{{{boxedInputFqcn}}}, {{{boxedOutputFqcn}}}>.() -> Unit = {}): dev.restate.client.SendResponse<{{{boxedOutputFqcn}}}> {
                if (delay != null) {
                    return this@IngressClient.client.sendSuspend(
                        {{../requestsClass}}.{{methodName}}({{#if ../isKeyed}}this@IngressClient.key, {{/if}}{{^inputEmpty}}req, {{/inputEmpty}}init).asSendDelayed(delay)
                    ).response();
                }
                return this@IngressClient.client.sendSuspend(
                    {{../requestsClass}}.{{methodName}}({{#if ../isKeyed}}this@IngressClient.key, {{/if}}{{^inputEmpty}}req, {{/inputEmpty}}init)
                ).response();
            }{{/isWorkflow}}{{/handlers}}
        }
    }
    {{/ingressClientEnabled}}
}