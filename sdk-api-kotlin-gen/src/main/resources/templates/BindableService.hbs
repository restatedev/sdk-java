{{#if originalClassPkg}}package {{originalClassPkg}}{{/if}}

class {{generatedClassSimpleName}}(
    bindableService: {{originalClassFqcn}},
    private val options: dev.restate.sdk.kotlin.Service.Options = dev.restate.sdk.kotlin.Service.Options.DEFAULT
): dev.restate.sdk.common.BindableService<dev.restate.sdk.kotlin.Service.Options> {

    val service: dev.restate.sdk.common.syscalls.ServiceDefinition<dev.restate.sdk.kotlin.Service.Options> =
        dev.restate.sdk.common.syscalls.ServiceDefinition.of(
            {{generatedClassSimpleNamePrefix}}Definitions.SERVICE_NAME,
            {{#if isObject}}dev.restate.sdk.common.ServiceType.VIRTUAL_OBJECT{{else}}dev.restate.sdk.common.ServiceType.SERVICE{{/if}},
            listOf(
                {{#handlers}}
                dev.restate.sdk.common.syscalls.HandlerDefinition.of(
                    dev.restate.sdk.common.syscalls.HandlerSpecification.of(
                        "{{name}}",
                        {{#if isExclusive}}dev.restate.sdk.common.HandlerType.EXCLUSIVE{{else}}dev.restate.sdk.common.HandlerType.SHARED{{/if}},
                        {{inputSerdeRef}},
                        {{outputSerdeRef}}
                    ){{#if inputAcceptContentType}}.withAcceptContentType("{{inputAcceptContentType}}"){{/if}},
                    dev.restate.sdk.kotlin.Service.Handler.of(bindableService::{{name}})
                ){{#unless @last}},{{/unless}}
                {{/handlers}}
            )
        )

    override fun options(): dev.restate.sdk.kotlin.Service.Options {
        return this.options
    }

    override fun definitions(): List<dev.restate.sdk.common.syscalls.ServiceDefinition<dev.restate.sdk.kotlin.Service.Options>> {
        return listOf(service)
    }
}