{{#if originalClassPkg}}package {{originalClassPkg}}{{/if}}

class {{generatedClassSimpleName}}(
    bindableService: {{originalClassFqcn}},
    options: dev.restate.sdk.kotlin.Service.Options = dev.restate.sdk.kotlin.Service.Options.DEFAULT
): dev.restate.sdk.common.BindableService<dev.restate.sdk.kotlin.Service.Options> {

    companion object {
        const val SERVICE_NAME: String = "{{serviceName}}";
    }

    val service: dev.restate.sdk.kotlin.Service = dev.restate.sdk.kotlin.Service.{{#if isObject}}virtualObject{{else}}service{{/if}}(SERVICE_NAME, options) {
        {{#handlers}}
            {{#if isShared}}sharedHandler{{else if isExclusive}}exclusiveHandler{{else}}handler{{/if}}(dev.restate.sdk.kotlin.Service.HandlerSignature("{{name}}", {{{inputSerdeDecl}}}, {{{outputSerdeDecl}}})) { ctx, req ->
            {{#if inputEmpty}}bindableService.{{name}}(ctx){{else}}bindableService.{{name}}(ctx, req){{/if}}
            }
        {{/handlers}}
        }

    override fun options(): dev.restate.sdk.kotlin.Service.Options {
        return service.options()
    }

    override fun definitions(): List<dev.restate.sdk.common.syscalls.ServiceDefinition<dev.restate.sdk.kotlin.Service.Options>> {
        return service.definitions()
    }
}