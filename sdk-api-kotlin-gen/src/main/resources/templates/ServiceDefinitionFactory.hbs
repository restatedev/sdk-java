{{#if originalClassPkg}}package {{originalClassPkg}}{{/if}}

class {{generatedClassSimpleName}}: dev.restate.sdk.endpoint.definition.ServiceDefinitionFactory<{{originalClassFqcn}}, dev.restate.sdk.kotlin.HandlerRunner.Options> {

    override fun create(bindableService: {{originalClassFqcn}}): dev.restate.sdk.endpoint.definition.ServiceDefinition<dev.restate.sdk.kotlin.HandlerRunner.Options> {
        return dev.restate.sdk.endpoint.definition.ServiceDefinition.of(
            {{generatedClassSimpleNamePrefix}}Definitions.SERVICE_NAME,
            {{#if isObject}}dev.restate.sdk.endpoint.definition.ServiceType.VIRTUAL_OBJECT{{else if isWorkflow}}dev.restate.sdk.endpoint.definition.ServiceType.WORKFLOW{{else}}dev.restate.sdk.endpoint.definition.ServiceType.SERVICE{{/if}},
            listOf(
            {{#handlers}}
                dev.restate.sdk.endpoint.definition.HandlerDefinition.of(
                "{{name}}",
                {{#if isExclusive}}dev.restate.sdk.endpoint.definition.HandlerType.EXCLUSIVE{{else if isWorkflow}}dev.restate.sdk.endpoint.definition.HandlerType.WORKFLOW{{else}}dev.restate.sdk.endpoint.definition.HandlerType.SHARED{{/if}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                dev.restate.sdk.kotlin.HandlerRunner.of(bindableService::{{name}})
                ){{#if inputAcceptContentType}}.withAcceptContentType("{{inputAcceptContentType}}"){{/if}}{{#unless @last}},{{/unless}}
            {{/handlers}}
            )
        )
    }

    override fun supports(serviceObject: Any?): Boolean {
        return serviceObject is {{originalClassFqcn}};
    }
}