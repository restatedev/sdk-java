{{#if originalClassPkg}}package {{originalClassPkg}}{{/if}}

class {{generatedClassSimpleName}}: dev.restate.sdk.common.handlerContext.ServiceDefinitionFactory<{{originalClassFqcn}}, dev.restate.sdk.kotlin.HandlerRunner.Options> {

    override fun create(bindableService: {{originalClassFqcn}}): dev.restate.sdk.common.handlerContext.ServiceDefinition<dev.restate.sdk.kotlin.HandlerRunner.Options>
    {
    return dev.restate.sdk.definition.ServiceDefinition.of(
            {{generatedClassSimpleNamePrefix}}
            {{#if isObject}}dev.restate.sdk.definition.ServiceType.VIRTUAL_OBJECT{{else
        if isWorkflow}}dev.restate.sdk.definition.ServiceType.WORKFLOW{{else}}dev.restate.sdk.definition.ServiceType.SERVICE{{/if}}
    listOf(
            {{#handlers}}
        dev.restate.sdk.definition.HandlerDefinition.of(
        dev.restate.sdk.definition.HandlerSpecification.of(
                {{name}}
                {{#if isExclusive}}dev.restate.sdk.definition.HandlerType.EXCLUSIVE{{else
            if isWorkflow}}dev.restate.sdk.definition.HandlerType.WORKFLOW{{else}}dev.restate.sdk.definition.HandlerType.SHARED{{/if}}
            {{inputSerdeRef}}{{outputSerdeRef}}
            ){{#if inputAcceptContentType}}.withAcceptContentType("{{inputAcceptContentType}}"){{/if}},
            dev.restate.sdk.kotlin.HandlerRunner.of(bindableService::{{name}})
            ){{#unless @last}},{{/unless}}
            {{/handlers}}
    )
    )
    }

    override fun supports(serviceObject: Any?): Boolean {
    return serviceObject is {{originalClassFqcn}} }
    }