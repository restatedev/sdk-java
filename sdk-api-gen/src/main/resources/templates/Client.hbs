{{#if originalClassPkg}}package {{originalClassPkg}};{{/if}}

import dev.restate.sdk.Awaitable;
import dev.restate.sdk.Context;
import dev.restate.sdk.common.StateKey;
import dev.restate.sdk.common.Serde;
import dev.restate.sdk.common.Target;
import java.util.Optional;
import java.time.Duration;

public class {{generatedClassSimpleName}} {

    public static ContextClient fromContext(Context ctx{{#isKeyed}}, String key{{/isKeyed}}) {
        return new ContextClient(ctx{{#isKeyed}}, key{{/isKeyed}});
    }

    public static IngressClient fromIngress(dev.restate.sdk.client.IngressClient ingressClient{{#isKeyed}}, String key{{/isKeyed}}) {
        return new IngressClient(ingressClient{{#isKeyed}}, key{{/isKeyed}});
    }

    public static IngressClient fromIngress(String baseUri{{#isKeyed}}, String key{{/isKeyed}}) {
        return new IngressClient(dev.restate.sdk.client.IngressClient.defaultClient(baseUri){{#isKeyed}}, key{{/isKeyed}});
    }

    public static class ContextClient {

        private final Context ctx;
        {{#isKeyed}}private final String key;{{/isKeyed}}

        public ContextClient(Context ctx{{#isKeyed}}, String key{{/isKeyed}}) {
            this.ctx = ctx;
            {{#isKeyed}}this.key = key;{{/isKeyed}}
        }

        {{#handlers}}
        public Awaitable<{{{boxedOutputFqcn}}}> {{methodName}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            return this.ctx.call(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}null{{else}}req{{/if}});
        }{{/handlers}}

        public Send send() {
            return new Send(null);
        }

        public Send send(Duration delay) {
            return new Send(delay);
        }

        public class Send {

            private final Duration delay;

            Send(Duration delay) {
                this.delay = delay;
            }

            {{#handlers}}
            public void {{methodName}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
                ContextClient.this.ctx.send(
                    {{{targetExpr this "ContextClient.this.key"}}},
                    {{inputSerdeRef}},
                    {{#if inputEmpty}}null{{else}}req{{/if}},
                    delay);
            }{{/handlers}}
        }
    }

    public static class IngressClient {

        private final dev.restate.sdk.client.IngressClient ingressClient;
        {{#isKeyed}}private final String key;{{/isKeyed}}

        public IngressClient(dev.restate.sdk.client.IngressClient ingressClient{{#isKeyed}}, String key{{/isKeyed}}) {
            this.ingressClient = ingressClient;
            {{#isKeyed}}this.key = key;{{/isKeyed}}
        }

        {{#handlers}}{{#if isWorkflow}}
        public dev.restate.sdk.client.IngressClient.WorkflowHandle<{{{boxedOutputFqcn}}}> workflowHandle() {
            return IngressClient.this.ingressClient.workflowHandle(
                {{generatedClassSimpleNamePrefix}}Definitions.SERVICE_NAME,
                this.key,
                {{outputSerdeRef}});
        }

        public dev.restate.sdk.client.IngressClient.WorkflowHandle<{{{boxedOutputFqcn}}}> submit({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            return this.submit(
                {{^inputEmpty}}req, {{/inputEmpty}}
                dev.restate.sdk.client.RequestOptions.DEFAULT);
        }

        public dev.restate.sdk.client.IngressClient.WorkflowHandle<{{{boxedOutputFqcn}}}> submit({{^inputEmpty}}{{{inputFqcn}}} req, {{/inputEmpty}}dev.restate.sdk.client.RequestOptions requestOptions) {
            IngressClient.this.ingressClient.send(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{#if inputEmpty}}null{{else}}req{{/if}},
                null,
                requestOptions);
            return this.workflowHandle();
        }

        public java.util.concurrent.CompletableFuture<dev.restate.sdk.client.IngressClient.WorkflowHandle<{{{boxedOutputFqcn}}}>> submitAsync({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            return this.submitAsync(
                {{^inputEmpty}}req, {{/inputEmpty}}
                dev.restate.sdk.client.RequestOptions.DEFAULT);
        }

        public java.util.concurrent.CompletableFuture<dev.restate.sdk.client.IngressClient.WorkflowHandle<{{{boxedOutputFqcn}}}>> submitAsync({{^inputEmpty}}{{{inputFqcn}}} req, {{/inputEmpty}}dev.restate.sdk.client.RequestOptions requestOptions) {
            return IngressClient.this.ingressClient.sendAsync(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{#if inputEmpty}}null{{else}}req{{/if}},
                null,
                requestOptions).thenApply(id -> this.workflowHandle());
        }
        {{else}}
        public {{#if outputEmpty}}void{{else}}{{{outputFqcn}}}{{/if}} {{methodName}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            {{^outputEmpty}}return {{/outputEmpty}}this.{{methodName}}(
                {{^inputEmpty}}req, {{/inputEmpty}}
                dev.restate.sdk.client.CallRequestOptions.DEFAULT);
        }

        public {{#if outputEmpty}}void{{else}}{{{outputFqcn}}}{{/if}} {{methodName}}({{^inputEmpty}}{{{inputFqcn}}} req, {{/inputEmpty}}dev.restate.sdk.client.CallRequestOptions requestOptions) {
            {{^outputEmpty}}return {{/outputEmpty}}this.ingressClient.call(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}null{{else}}req{{/if}},
                requestOptions);
        }

        public {{#if outputEmpty}}java.util.concurrent.CompletableFuture<Void>{{else}}java.util.concurrent.CompletableFuture<{{{boxedOutputFqcn}}}>{{/if}} {{methodName}}Async({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            return this.{{methodName}}Async(
                {{^inputEmpty}}req, {{/inputEmpty}}
                dev.restate.sdk.client.CallRequestOptions.DEFAULT);
        }

        public {{#if outputEmpty}}java.util.concurrent.CompletableFuture<Void>{{else}}java.util.concurrent.CompletableFuture<{{{boxedOutputFqcn}}}>{{/if}} {{methodName}}Async({{^inputEmpty}}{{{inputFqcn}}} req, {{/inputEmpty}}dev.restate.sdk.client.CallRequestOptions requestOptions) {
            return this.ingressClient.callAsync(
                {{{targetExpr this "this.key"}}},
                {{inputSerdeRef}},
                {{outputSerdeRef}},
                {{#if inputEmpty}}null{{else}}req{{/if}},
                requestOptions);
        }{{/if}}{{/handlers}}

        public Send send() {
            return new Send(null);
        }

        public Send send(Duration delay) {
            return new Send(delay);
        }

        public class Send {

            private final Duration delay;

            Send(Duration delay) {
                this.delay = delay;
            }

            {{#handlers}}{{^isWorkflow}}
            public String {{methodName}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
                return this.{{methodName}}(
                    {{^inputEmpty}}req, {{/inputEmpty}}
                    dev.restate.sdk.client.CallRequestOptions.DEFAULT);
            }

            public String {{methodName}}({{^inputEmpty}}{{{inputFqcn}}} req, {{/inputEmpty}}dev.restate.sdk.client.CallRequestOptions requestOptions) {
                return IngressClient.this.ingressClient.send(
                    {{{targetExpr this "IngressClient.this.key"}}},
                    {{inputSerdeRef}},
                    {{#if inputEmpty}}null{{else}}req{{/if}},
                    this.delay,
                    requestOptions);
            }

            public java.util.concurrent.CompletableFuture<String> {{methodName}}Async({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
                return this.{{methodName}}Async(
                    {{^inputEmpty}}req, {{/inputEmpty}}
                    dev.restate.sdk.client.CallRequestOptions.DEFAULT);
            }

            public java.util.concurrent.CompletableFuture<String> {{methodName}}Async({{^inputEmpty}}{{{inputFqcn}}} req, {{/inputEmpty}}dev.restate.sdk.client.CallRequestOptions requestOptions) {
                return IngressClient.this.ingressClient.sendAsync(
                    {{{targetExpr this "IngressClient.this.key"}}},
                    {{inputSerdeRef}},
                    {{#if inputEmpty}}null{{else}}req{{/if}},
                    this.delay,
                    requestOptions);
            }{{/isWorkflow}}{{/handlers}}
        }
    }
}