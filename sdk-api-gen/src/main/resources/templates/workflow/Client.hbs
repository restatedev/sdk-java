{{#if originalClassPkg}}package {{originalClassPkg}};{{/if}}

import dev.restate.sdk.Awaitable;
import dev.restate.sdk.Context;
import dev.restate.sdk.common.StateKey;
import dev.restate.sdk.common.Serde;
import dev.restate.sdk.workflow.impl.WorkflowCodegenUtil;
import java.util.Optional;
import java.time.Duration;

public class {{generatedClassSimpleName}} {

    public static final String WORKFLOW_NAME = "{{componentName}}";

    {{#handlers}}
    private static final Serde<{{{boxedInputFqcn}}}> {{inputSerdeFieldName}} = {{{inputSerdeDecl}}};
    private static final Serde<{{{boxedOutputFqcn}}}> {{outputSerdeFieldName}} = {{{outputSerdeDecl}}};
    {{/handlers}}

    public static ContextClient fromContext(Context ctx, String key) {
        return new ContextClient(ctx, key);
    }

    public static IngressClient fromIngress(dev.restate.sdk.client.IngressClient ingressClient, String key) {
        return new IngressClient(ingressClient, key);
    }

    public static IngressClient fromIngress(String baseUri, String key) {
        return new IngressClient(dev.restate.sdk.client.IngressClient.defaultClient(baseUri), key);
    }

    public static class ContextClient {

        private final Context ctx;
        private final String workflowKey;

        public ContextClient(Context ctx, String workflowKey) {
            this.ctx = ctx;
            this.workflowKey = workflowKey;
        }

        {{#handlers}}{{#if isWorkflow}}
        public Awaitable<dev.restate.sdk.workflow.WorkflowExecutionState> submit({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            return WorkflowCodegenUtil.RestateClient.submit(ctx, WORKFLOW_NAME, workflowKey, {{#if inputEmpty}}null{{else}}req{{/if}});
        }

        public Awaitable<Boolean> isCompleted() {
            return WorkflowCodegenUtil.RestateClient.isCompleted(ctx, WORKFLOW_NAME, workflowKey);
        }

        {{^outputEmpty}}
        public Awaitable<Optional<{{{outputFqcn}}}>> getOutput() {
            return WorkflowCodegenUtil.RestateClient.getOutput(ctx, WORKFLOW_NAME, workflowKey, {{outputSerdeFieldName}});
        }{{/outputEmpty}}
        {{/if}}{{/handlers}}

        public <T> Awaitable<Optional<T>> getState(StateKey<T> key) {
            return WorkflowCodegenUtil.RestateClient.getState(ctx, WORKFLOW_NAME, workflowKey, key);
        }

        {{#handlers}}{{#if isShared}}
        public Awaitable<{{{boxedOutputFqcn}}}> {{name}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            return WorkflowCodegenUtil.RestateClient.invokeShared(ctx, WORKFLOW_NAME, "{{name}}", workflowKey, {{#if inputEmpty}}null{{else}}req{{/if}}, {{outputSerdeFieldName}});
        }
        {{/if}}{{/handlers}}

        public Send send() {
            return new Send();
        }

        public SendDelayed sendDelayed(Duration delay) {
            return new SendDelayed(delay);
        }

        public class Send {

            {{#handlers}}{{#if isShared}}
            public void {{name}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
                WorkflowCodegenUtil.RestateClient.invokeSharedSend(ContextClient.this.ctx, WORKFLOW_NAME, "{{name}}", ContextClient.this.workflowKey, {{#if inputEmpty}}null{{else}}req{{/if}});
            }{{/if}}{{/handlers}}

        }

        public class SendDelayed {

            private final Duration delay;

            SendDelayed(Duration delay) {
                this.delay = delay;
            }

            {{#handlers}}{{#if isShared}}
            public void {{name}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
                WorkflowCodegenUtil.RestateClient.invokeSharedSendDelayed(ContextClient.this.ctx, WORKFLOW_NAME, "{{name}}", ContextClient.this.workflowKey, {{#if inputEmpty}}null{{else}}req{{/if}}, delay);
            }{{/if}}{{/handlers}}
        }
    }

    public static class IngressClient {

        private final dev.restate.sdk.client.IngressClient ingressClient;
        private final String workflowKey;

        public IngressClient(dev.restate.sdk.client.IngressClient ingressClient, String workflowKey) {
            this.ingressClient = ingressClient;
            this.workflowKey = workflowKey;
        }

        {{#handlers}}{{#if isWorkflow}}
        public dev.restate.sdk.workflow.WorkflowExecutionState submit({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            return WorkflowCodegenUtil.ExternalClient.submit(ingressClient, WORKFLOW_NAME, workflowKey, {{#if inputEmpty}}null{{else}}req{{/if}});
        }

        public boolean isCompleted() {
            return WorkflowCodegenUtil.ExternalClient.isCompleted(ingressClient, WORKFLOW_NAME, workflowKey);
        }

        {{^outputEmpty}}
        public Optional<{{{outputFqcn}}}> getOutput() {
            return WorkflowCodegenUtil.ExternalClient.getOutput(ingressClient, WORKFLOW_NAME, workflowKey, {{outputSerdeFieldName}});
        }{{/outputEmpty}}
        {{/if}}{{/handlers}}

        public <T> Optional<T> getState(StateKey<T> key) {
            return WorkflowCodegenUtil.ExternalClient.getState(ingressClient, WORKFLOW_NAME, workflowKey, key);
        }

        {{#handlers}}{{#if isShared}}
        public {{#if outputEmpty}}void{{else}}{{{outputFqcn}}}{{/if}} {{name}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
            {{^outputEmpty}}return {{/outputEmpty}}WorkflowCodegenUtil.ExternalClient.invokeShared(IngressClient.this.ingressClient, WORKFLOW_NAME, "{{name}}", IngressClient.this.workflowKey, {{#if inputEmpty}}null{{else}}req{{/if}}, {{outputSerdeFieldName}});
        }
        {{/if}}{{/handlers}}

        public Send send() {
            return new Send();
        }

        public class Send {

            {{#handlers}}{{#if isShared}}
            public void {{name}}({{^inputEmpty}}{{{inputFqcn}}} req{{/inputEmpty}}) {
                WorkflowCodegenUtil.ExternalClient.invokeSharedSend(IngressClient.this.ingressClient, WORKFLOW_NAME, "{{name}}", IngressClient.this.workflowKey, {{#if inputEmpty}}null{{else}}req{{/if}});
            }
            {{/if}}{{/handlers}}

        }
    }
}